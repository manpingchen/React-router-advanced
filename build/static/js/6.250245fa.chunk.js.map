{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isFormReady","setIsFormReady","onChange","Boolean","current","value","form","onSubmit","event","preventDefault","enteredAuthor","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","disabled","onClick","console","log","NewQuote","navigate","useNavigate","useHttp","addNewQuote","sendRequest","status","addQuoteHandler","newQuote","a","useEffect"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iHCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,wBC0E/BC,EArEG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAGrB,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KA0BA,OACE,cAAC,WAAD,UAKE,cAAC,EAAD,UACE,uBAEEC,SAjCkB,WACxBD,EAAeE,QAAQP,EAAeQ,QAAQC,OAASP,EAAaM,QAAQC,SAiCtEd,UAAWC,IAAQc,KACnBC,SA/BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBd,EAAeQ,QAAQC,MACvCM,EAAcb,EAAaM,QAAQC,MAIzCf,EAAMsB,WAAW,CAAEC,OAAQH,EAAeI,KAAMH,KAmB5C,UAMGrB,EAAMyB,WACL,qBAAKxB,UAAWC,IAAQwB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK1B,UAAWC,IAAQ0B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK1B,OAEtC,sBAAKL,UAAWC,IAAQ0B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKxB,OAEpC,qBAAKP,UAAWC,IAAQgC,QAAxB,SACE,wBAAQjC,UAAU,MAAMkC,UAAWzB,EAAa0B,QArC5B,WAE5BC,QAAQC,IAAI,UAmCJ,iC,gBC5CGC,UAjBE,WACf,IAAMC,EAAWC,cACjB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAEfC,EAAe,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEAChBJ,EAAYG,GADI,2CAAH,sDAUrB,OANAE,qBAAU,WACO,cAAXJ,GACFL,EAAS,aAEV,CAACK,EAAQL,IAEL,cAAC,EAAD,CAAWlB,WAAYwB","file":"static/js/6.250245fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from \"react\";\n\n// import { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  // const [isEntering, setIsEntering] = useState(false);\n  const [isFormReady, setIsFormReady] = useState(false);\n\n  const formChangeHandler = () => {\n    setIsFormReady(Boolean(authorInputRef.current.value && textInputRef.current.value));\n  };\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n \n  const finishEnteringHandler = () => {\n    // setIsEntering(false);\n    console.log(\"Click\");\n  };\n\n  // const formFocusedHandler = () => {\n  //   setIsEntering(true);\n  // };\n\n  return (\n    <Fragment>\n      {/* <Prompt\n        when={isEntering}\n        message={(location) => \"Are you sure you want to leave? The entered messages will be lost.\"}\n      /> */}\n      <Card>\n        <form\n          // onFocus={formFocusedHandler}\n          onChange={formChangeHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className=\"btn\" disabled={!isFormReady} onClick={finishEnteringHandler}>\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useNavigate } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport { addNewQuote } from \"../lib/api\";\nimport useHttp from \"../hooks/use-http\";\nimport { useEffect } from \"react\";\n\nconst NewQuote = () => {\n  const navigate = useNavigate();\n  const { sendRequest, status } = useHttp(addNewQuote);\n\n  const addQuoteHandler = async (newQuote) => {\n    await sendRequest(newQuote);\n  };\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      navigate(\"/quotes\"); \n    }\n  }, [status, navigate]);\n  \n  return <QuoteForm onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}