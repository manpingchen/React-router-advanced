{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js"],"names":["module","exports","NewCommentForm","props","onFetchAllComments","quoteId","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","submitFormHandler","event","a","preventDefault","commentData","text","current","value","useEffect","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","disabled","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","useParams","length","fetchAllCommentsHandler","useCallback","onClick"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,kJC8CdC,EAxCQ,SAACC,GACtB,IAAQC,EAAgCD,EAAhCC,mBAAoBC,EAAYF,EAAZE,QACtBC,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAEvBC,EAAiB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACxBD,EAAME,iBADkB,SAIlBN,EAAY,CAAEO,YAAa,CAAEC,KAAMZ,EAAea,QAAQC,OAASf,QAASA,IAJ1D,2CAAH,sDAcvB,OAPAgB,qBAAU,WACO,cAAXV,GAA2BC,IAC7BR,EAAmBC,GACnBC,EAAea,QAAQC,MAAQ,MAEhC,CAACT,EAAQC,EAAOP,EAASD,IAG1B,uBAAMkB,UAAWC,IAAQC,KAAMC,SAAUZ,EAAzC,UACc,YAAXF,GACC,qBAAKW,UAAU,WAAf,SACE,cAACI,EAAA,EAAD,MAGJ,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUZ,EAA3C,UACE,uBAAOe,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKzB,OAEvC,qBAAKgB,UAAWC,IAAQS,QAAxB,SACE,wBAAQV,UAAU,MAAMW,SAAqB,YAAXtB,EAAlC,+B,iBC7BOuB,EARK,SAAC/B,GACnB,OACE,oBAAImB,UAAWC,IAAQY,KAAvB,SACE,4BAAIhC,EAAMe,U,iBCQDkB,EAVM,SAACjC,GACpB,OACE,oBAAImB,UAAWC,IAAQc,SAAvB,SACGlC,EAAMkC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BrB,KAAMqB,EAAQrB,MAA1BqB,EAAQV,U,OCqDnBW,UAlDE,WACf,IASIH,EATJ,EAA8CI,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAsDnC,YAAQoC,KAAgB,GAAtElC,EAAR,EAAQA,YAAmBmC,EAA3B,EAAqBC,KAAsBnC,EAA3C,EAA2CA,OAEnCN,EADO0C,cACP1C,QAQO,YAAXM,IACF0B,EACE,qBAAKf,UAAU,WAAf,SACE,cAACI,EAAA,EAAD,OAKS,cAAXf,GAA0BkC,GAAkBA,EAAeG,OAAS,IACtEX,EAAW,cAAC,EAAD,CAAaA,SAAUQ,KAGrB,cAAXlC,GAA4BkC,GAA4C,IAA1BA,EAAeG,SAC/DX,EAAW,qBAAKf,UAAU,WAAf,8BAGb,IAAM2B,EAA0BC,uBAAY,WAC1CxC,EAAYL,KACX,CAACK,EAAaL,IAMjB,OAJAgB,qBAAU,WACR4B,MACC,CAACA,IAGF,0BAAS3B,UAAWC,IAAQc,SAA5B,UACE,gDACEK,GACA,wBAAQpB,UAAU,MAAM6B,QAlCC,WAC7BR,GAAmB,IAiCf,2BAIDD,GAAmB,cAAC,EAAD,CAAgBrC,QAASA,EAASD,mBAAoB6C,IACzEZ","file":"static/js/4.ff392a9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import { useEffect, useRef } from \"react\";\nimport { addComment } from \"../../lib/api\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const { onFetchAllComments, quoteId } = props;\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    await sendRequest({ commentData: { text: commentTextRef.current.value }, quoteId: quoteId });\n  };\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onFetchAllComments(quoteId);\n      commentTextRef.current.value = \"\";\n    }\n  }, [status, error, quoteId, onFetchAllComments]);\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\" disabled={status === \"pending\"}>\n          Add Comment\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentList from \"./CommentsList\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport { useParams } from \"react-router-dom\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { sendRequest, data: loadedComments, status } = useHttp(getAllComments, true);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentList comments={loadedComments} />;\n  }\n\n  if (status === \"completed\" && (!loadedComments || loadedComments.length === 0)) {\n    comments = <div className=\"centered\">Mo comment yet.</div>;\n  }\n\n  const fetchAllCommentsHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  useEffect(() => {\n    fetchAllCommentsHandler();\n  }, [fetchAllCommentsHandler]);\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onFetchAllComments={fetchAllCommentsHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"sourceRoot":""}